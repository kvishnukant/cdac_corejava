NOTE : 
1. When u ABORT(i.e w/o proper closing socket inst) clnt or srvr --AND other remote end is using br.readLine -- other end gets Socket exc --conn lost by peer(at br.readLine)

If u are using din.readUTF() --- u get EOFExc

NOTE that if other end is not reading or writing data from/to socket u will not get any exc.

1.5 When u ABORT(i.e w/o proper closing socket inst) clnt or srvr --AND other remote end is using sc.hasNextLine --it will ret false & then u can end receiver thread.

2.When u propery close socket inst on srvr or clnt & if other end is using br.readLine or any other read method --- then it rets null. BUT doesn't throw exc.

3.When u propery close socket inst on srvr or clnt & if other end is using sc.hasNextLine() or any other checking method (hasNext() or hasNextInt() ...) --- then it rets false. BUT doesn't throw exc.

In Java 1.4+, there're 3 ways to interrupt a stream which is blocked on socket I/O:

If the socket was created using a regular java.net.Socket(InetAddress, int) constructor,  can close it from a separate thread. As a result, a SocketException is thrown in the blocked thread.

If the socket was created using SocketChannel.open(...).socket() (non-blocking I/O) — again, it is possible to close it from a separate thread, but now a different exception (an AsynchronousCloseException) is thrown in the blocked thread.

Additionally, in case non-blocking I/O is used, it is possible to interrupt a blocked thread, with a ClosedByInterruptException thrown. Interrupting a blocked thread when using old-style Java I/O has no effect on the thread.